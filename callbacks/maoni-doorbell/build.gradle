/*
 * Copyright (c) 2016 Armel Soro
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
//apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'

final VERSION_NAME = maoni_version
final VERSION_CODE = VERSION_NAME.replace('.', '').toInteger()

group = maoni_group
version = VERSION_NAME

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode VERSION_CODE
        versionName VERSION_NAME
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
//        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api project(':maoni-common')

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.3.0'

    //Needle (for task execution)
    implementation 'com.zsoltsafrany:needle:1.0.0'
}

task generateSourcesJar(type: Jar) {
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    failOnError false
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}

generateJavadocsJar.dependsOn generateJavadocs

artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}

def pomConfig = {
    licenses {
        license {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
            distribution POM_LICENCE_DIST
        }
    }
    developers {
        developer {
            id POM_DEVELOPER_ID
            name POM_DEVELOPER_NAME
            email 'armel@rm3l.org'
        }
    }
    scm {
        url POM_SCM_URL
        connection POM_SCM_CONNECTION
        developerConnection POM_SCM_DEV_CONNECTION
    }
}

publishing {
    publications {
        release(MavenPublication) {
            // Define this explicitly if using implementation or api configurations
            pom.withXml {
                def pomNode = asNode()
                pomNode.remove(pomNode.get('packaging'))

                pomNode.appendNode('name', POM_NAME)
                pomNode.appendNode('description', POM_DESCRIPTION)
                pomNode.appendNode('url', POM_URL)
                pomNode.appendNode('packaging', POM_PACKAGING)

                def dependenciesNode = pomNode.getAt('dependencies')[0] ?: pomNode.appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        if (it.name.startsWith('maoni-')) {
                            dependencyNode.appendNode('version', '8.0.10')
                            dependencyNode.appendNode('packaging', 'aar')
                        } else {
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }

                pomNode.children().last() + pomConfig
            }
        }
    }
}

bintray {

    //Attempt to read keystore.properties file, if any first
    final propsFile = new File("${System.properties['user.home']}/.droid/", "maoni.bintray.properties")

    if (propsFile.exists()) {
        logger.info("[Bintray] Using properties file located at " + propsFile.absolutePath)
        final props = new Properties()
        props.load(new FileInputStream(propsFile))
        user = props['user']
        key = props['key']
    } else {
        user = ""
        key = ""
    }

    publications = ['release']

    publish = true //If version should be auto published after an upload

    pkg {
        repo = 'maven'
        name = 'org.rm3l:maoni-doorbell'
        labels = ['maoni', 'android', 'feedback', 'android-lib', 'comments', 'review', 'bug', 'issue']

        //noinspection GroovyAssignabilityCheck
        version {
            name = VERSION_NAME
            desc = 'Handler for Maoni that sends feedbacks to Doorbell.io'
            released = new Date()
            vcsTag = VERSION_NAME
        }

        publicDownloadNumbers = true

        licenses = ['MIT']
        vcsUrl = 'https://github.com/rm3l/maoni.git'
        websiteUrl = 'https://github.com/maoni-app/maoni/tree/8.0.10/callbacks/maoni-doorbell'
        issueTrackerUrl = 'https://github.com/rm3l/maoni/issues'

    }
    configurations = ['archives']
}
