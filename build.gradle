/*
 * Copyright (c) 2016 Armel Soro
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

final homePath = System.properties['user.home']

buildscript {
    ext.maoni_group = 'org.rm3l'
    ext.maoni_version = '8.3.2'

    ext.kotlin_version = '1.4.10'
    ext.anko_version = '0.10.8'

    ext.aboutlibraries_version = '8.4.2'

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
        google()
    }
    dependencies {
        classpath "com.mikepenz.aboutlibraries.plugin:aboutlibraries-plugin:${aboutlibraries_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
//        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.github.triplet.gradle:play-publisher:2.3.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        google()
        maven { url 'https://jitpack.io' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task javadoc {
    logger.info("Fake 'javadoc' task from root project")
}

task generatePomFileForProductionPublication {
    logger.info("Fake 'generatePomFileForProductionPublication' task from root project")
}

ext.getPlayStoreConfig = {
  return file(homePath.toString() + "/.droid/PlayStore.keys.json")
}

ext.getDebugSigningConfig = {
    return ['androiddebugkey', new File("${rootDir}/debug.keystore"), 'android', 'android']
}

ext.getReleaseSigningInfo = {
    android ->
        def storeFile = null
        def storePassword = null
        def keyAlias = null
        def keyPassword = null

        //Attempt to read keystore.properties file, if any first
        final propsFile = new File(homePath.toString() + "/.droid/", "maoni-keystore.properties")
        final configName = 'release'

        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
            logger.info("Using properties file located at " + propsFile.absolutePath)
            final props = new Properties()
            props.load(new FileInputStream(propsFile))
            storeFile = new File(props['keystore'].toString())
            storePassword = props['storePassword']
            keyAlias = props['keyAlias']
            keyPassword = props['keyPassword']

        } else if (System.console() != null) {
            storeFile = System.console().readLine("\nPlease enter path to keystore file: ")
            storeFile = new File(storeFile)
            storePassword = System.console().readPassword("\nPlease enter the store password: ")
            keyAlias = System.console().readLine("\nPlease enter the key alias: ")
            keyPassword = System.console().readPassword("\nPlease enter the key password: ")
        }

        return [storeFile, storePassword, keyAlias, keyPassword]

}

subprojects { project ->
    afterEvaluate {
        if (project.plugins.hasPlugin("java")) {
            project.sourceCompatibility = JavaVersion.VERSION_1_8
            project.targetCompatibility = JavaVersion.VERSION_1_8
        }

        project.tasks.withType(Test) { Test task ->
            task.jvmArgs << "-Djava.awt.headless=true"
        }
    }
}

